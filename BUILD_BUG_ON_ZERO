#define BUILD_BUG_ON_ZERO(e) (sizeof(struct { int:-!!(e); })) 中的“int-!!(e)"是什么意思？



#define BUILD_BUG_ON_ZERO(e) (sizeof(struct { int:-!!(e); })) 这个宏定义函数当中的“int-!!(e)"是什么意思？
问题1：为什么这个结构没有 结构名
问题2：为什么int后加 ”冒号“（:），还有”减号“（-）是什么意思？
问题3：两个叹号就等于e的逻辑意义没有变化，为什么还要用两个叹号？


问题1：为什么这个结构没有 结构名
  可以是匿名结构（无标签结构）
 问题2：为什么int后加 ”冒号“（:），还有”减号“（-）是什么意思？
  冒号那个是位域，就是定义的变量占用多少位，
struct A
{
 int  a:3; //a占3位（bit)
int  b:5;//b占5位
};
两个在一起才一个字节

 问题3：两个叹号就等于e的逻辑意义没有变化，为什么还要用两个叹号？
 逻辑值不一样，这个结果只能是0或者1

如果编译通过的话，只能为0， -0还是0，如果是-1的话是不能通过的
所以这样看来这个e只能为0

看宏的名字，就是检查e的值的，必须为0

追问

就是说这里是必须为0了？如果不为零编译就通不过，那一定会发现问题，并解决e不为零的问题之后才能编译是吧？

追答

应该是的，如果位域后面的这个位数是-1 ，肯定会报错的，范围应该是0~32
所以必须为0 

类似const的用法，如果你无意修改了常量，编译会检查出来的

