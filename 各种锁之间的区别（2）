作者：知乎用户
链接：https://www.zhihu.com/question/66733477/answer/246760992
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

锁的正确理解，是必须结合操作系统原理才能明了的。相关书籍/课程为了说清楚自身核心内容，是必需做一些内容上的切割的。非如此不足以把基本概念讲清楚。
但是，作为学习者，是必须在完全理解分离的基本概念的基础上，在脑中重新组合它们、从而形成正确、系统的全景图像的。非如此，则理论无法指导实践。所以，
我先粗略介绍下操作系统的“进程调度”。进程是什么、进程调度是什么，这里就不再重复了。这里面需要注意的知识点是：进程调度会把“缺乏资源”的进程置于休
眠队列、又要把休眠队列中资源要求可以满足的进程置于等待队列——然后时间片一到就会调度运行。一般学到这里，我们都会觉得“资源”嘛，就是磁盘访问、网络
通信之类东西：它们忙不忙，操作系统自然是知道的……其实不然。操作系统在这里做了“归一化”处理，它压根懒得知道你在等什么（不然进程调度就实现的过于复
杂了）。所谓的“资源”，在进程调度逻辑看来，就是一个个“锁”——请求锁得不到满足，就是“缺乏资源”；锁被释放了，请求它的进程显然就有“资源”可用了。。
（那么，我们可以用一些分析工具看出，多少进程阻塞在磁盘访问上了，这个是从何而来的呢？答案是，操作系统会维护一个“锁”的列表；找到这个锁的对应项，
读它的相关信息，再找到申请它的进程队列，自然就知道哪些进程试图访问磁盘、但暂时得不到满足了——注意这类锁并不需要进程显式申请，相关逻辑已经包含在
对应的系统调用里了）有了这个基础，再看锁，就清晰明了了：1、“自旋锁”是一种“申请不到也不知会操作系统”的锁。这可以避免进程因被识别为“资源不足”而
被操作系统置入休眠队列，从而避免不必要的上下文切换开销；但缺点是，它会导致“申请不到锁时执行死循环”，使得CPU核心占用100%——如果是单核单线程CPU
，它就白白发一个时间片的热然后失去执行权（因为它占用了时间片，导致能释放资源给它的进/线程压根得不到执行机会）；只有在多CPU和/或多核和/或多线程
硬件平台上、且这个锁一定会在远短于一个时间片的时间内被请求到，它才可能真正提高效率（否则又是白白浪费时间、电力让CPU发热了）。总之，使用自旋锁
必须非常慎重，须先模拟各种不同场景做好profile、然后根据数据决定是否使用它。2、其它锁都是“申请不到就通知操作系统：资源不足，我没法干活了，申请
休息”。于是操作系统暂停当前进程（线程）并将其置于等待/休眠队列，腾出它的CPU给其它进/线程使用；直到另外一个进程（线程）释放锁、它才可以再次得到
执行机会。进一步的，资源又分许多种：有的资源同时只允许一个访问，无论读写；于是我们抽象它为“互斥锁”。有的资源同时只允许一个修改、但可以允许许多
个读取（读取时不得写入）；于是我们抽象它为“读写锁”。此外，还有一类典型的资源访问场景，是“甲做某些先期准备、就绪后再由乙接续工作”（比如“甲从网
络上接受报文并拆包以取出任务，一组工作者乙等待处理已经拆包的任务”）——如果用普通锁在用户态写，要么会搞的很复杂，要么就得忙等（不停的扫描检查条
件是否满足）；使用条件变量，就可以让甲每取出一个任务就发一个通知，然后操作系统自动转发通知给乙（所谓“转发通知”，实质上是，平常乙执行“等待条件
变量”系统调用、然后因条件得不到满足而被操作系统自动挂起；等条件满足了，操作系统才会让其继续执行）。你看，通过不同的锁，进程就可以配合操作系统
，做到“既不浪费CPU时间、又尽量把各种资源利用到极致”了。
