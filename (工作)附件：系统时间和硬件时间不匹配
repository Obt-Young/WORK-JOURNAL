clock/time/timezone/UTC/local time

linux系统里面有两个时钟：
1）硬件时钟：独立于任何软件而运行的时钟，可以理解为晶振，在CPU中运行，即便断电。一般叫做Hardware clock、Real time clock、BIOS clock、CMOS clock。
2）系统时间：此时间由内核中的一个时钟管理，由定时器中断驱动。系统时间使一个秒数，计数起点是1970.1.1 UTC，以在起点上加上秒数，就是当前的系统时间。

设计硬件时钟的目的：linux系统不跑的情况下，计时还是要进行的。
  “只有在系统启动的时候会议硬件时钟作为标准设置一下系统时间，其他情况下基本不会用到硬件时钟。”
  

       It is important that the System Time not have any discontinuities such as would happen if  you  used  the
       date(1L)  program  to  set it while the system is running.  You can, however, do whatever you want to the
       Hardware Clock while the system is running, and the next time Linux starts up, it will  do  so  with  the
       adjusted time from the Hardware Clock.

linux内核为操作系统维护了一个本地时区，这个本地时区要么被设置成系统环境变量TZ，要么被写到一个目录下/usr/share/zoneinfo。有些软件或者模块会依赖这个
本地时区的值，比如vfat 文件系统。使用--hctosys命令会修改系统中的这个值。

时区值有两个域：1）tz_minuteswest，表示本地时间比UTC时间落后了多少分钟；2）不用关注


硬件时钟一般都不会太准，但是这个“不准”的进度是可预测的————基本上每天多的或少的时间是同一个数值。这被称作“系统偏移”。
可使用hwclock --adjust矫正系统偏移。
  具体的矫正细节：hwclock维护文件/etc/adjtime，文件中存放一些历史信息。
  使用hwclock --set或者hwclock --systohc会把“系统偏移”信息计入/etc/adjtime文件汇总，每当下次再使用这些命令，操作系统会计算上一次和这一次的偏移
  差，除以天数，得到的就是平均每天的偏移量————“偏移率”，进而使用--adjust命令进行调整。
 
建议：在系统启动的时，先做hwclock --adjust，再做hwclock --hctosys，然后阶段性地使用定时任务调用hwclock --adjust。

/etc/adjtime文件很有用，它会记录两次调用（hwclock --adjust？？）之间几乎所有信息（不仅仅是系统偏移量）
/etc/adjtime的内容如下（以ASCII码为编码）：
第一行（三个数值）：1）平均每天的系统偏移秒数；2）自1969年开始，最近一次调整的秒数（？？？）；3）0
第二行（一个数值）：同上一行的第二个字段
第三行：“UTC”或者“LOACL”，表明硬件时钟将要使用哪一种计时方法。

内核的自动硬件时钟同步动作：
硬件时钟可以被系统时间设置，内核内部有个“11分钟模式”，默认情况下这个模式是关闭的，可以通过守护进程ntpd来开启它。但是一旦使用任何设置系统时间的动作，
这个模式就自动关闭。 ntpd会周期性地从远程服务器或者无线电时钟获取时间作为系统时间，并把硬件时钟对其到这个时间。

小结：一般情况下，系统在启动的时候会先使用硬件时钟作为系统时间，当系统有能力自己设置系统时间的时候，就使用ntpd来维护系统时间了。















