http://www.cnblogs.com/chris-cp/p/6022383.html
https://zh.wikipedia.org/wiki/ISCSI
http://linux-iscsi.org/wiki/Downloads#Installation
https://www.asustor.com/zh-cn/online/College_topic?topic=308
http://www.cnblogs.com/yunnotes/archive/2013/04/19/3032488.html

基本知识：
•	Iscsi由两部分组成：initator 和 target
•	Initator为客户端，target为服务端
•	Initator所属代码在工程open-iscsi-master中
•	Target所属代码在工程iscsitarget中

问题描述：
见邮件
注：邮件中 100.0.0.1 为initator（客户端）， 100.0.0.2 为target（服务端）

问题小结：
从服务端在回应客户端上一个IO请求且客户端已收到，到客户端发出下一个IO请求，这中间的时间过长。
考虑从客户端的逻辑来追踪时间消耗在什么地方。

分析：
1.	iscsi的基本传输单元为PDU（Protocal Data Unit），wireshark中每一行代表一个IP层的packet包，结合图片描述，可猜测对应关系为  1个PDU = n个packet  。
2.	目前现象为，客户端在收到服务端针对本次IO的最后一个PDU后，没有快速做出响应，而是迟疑了约10ms才发出随后的PDU。
3.	如果1个PDU = n个packet的猜测是正确的，那么问题就出在PDU之间的衔接上，而这种衔接的“断档”恰恰出现在客户端，即initator。
4.	我们现在就从接收PDU并处理PDU的相关函数入手。
打开open-iscsi-master工程，查找接收pdu的相关函数，可以找到如下调用顺序（堆结构罗列）：
1.	事件触发
2.  static int iscsi_sched_ev_context(struct iscsi_ev_context *ev_context,
				  struct iscsi_conn *conn, unsigned long tmo,
				  int event);
3.  static void session_conn_recv_pdu(void *data)
4.  int  iscsi_io_recv_pdu(iscsi_conn_t *conn, struct iscsi_hdr *hdr,
	       int hdr_digest, char *data, int max_data_length, int data_digest,
	       int timeout)
